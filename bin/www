#!/usr/bin/env node

/**
 * Module dependencies.
 */

const req = require('express/lib/request');
var app = require('../app');
var debug = require('debug')('petpow-arturo:server');
var http = require('http');
var socketIo = require('socket.io');
const res = require('express/lib/response');
const { connect } = require('http2');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Create Socket Io server
 */

const render = (data) => {
  const html = `
            <section class="hero align-items-stretch">
              <div class=" d-flex flex-column justify-content-center align-items-center mt-5 mb-5">
                <img src="/images/logoGame.png" width="300" heigth="100" alt="Algo">
              </div>
              <div class="d-flex flex-column justify-content-center align-items-center">
                <h1>Bienvenido al Juego del Ahorcado</h1>
                <p>¡Hola! Bienvenido al Juego del Ahorcado. ¿Estás listo para jugar?</p>
                <a class="btn btn-secondary btn-lg" href="/users/game" role="button">Iniciar Partida</a>
              </div>
            </section>
`;
  return html
}

const skio = new socketIo.Server(server);
skio.on('connection', (socket) => {
  socket.on('render', (data) => {
    var html = render(data);
    socket.emit('html', html);
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
