#!/usr/bin/env node

/**
 * Module dependencies.
 */

const req = require('express/lib/request');
var app = require('../app');
var debug = require('debug')('petpow-arturo:server');
var http = require('http');
const res = require('express/lib/response');
const { connect } = require('http2');
var { data: data, getWord: getWord } = require('../public/javascripts/SeverFetch');
var socketIo = require('socket.io');
var { gameView, winGameView, loseGameView } = require('../public/javascripts/TemplateString');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**Backend Game */

/**
 * Create Socket Io server
 */
const serverBackend = new socketIo.Server(server);
serverBackend.on('connection', (socket) => {

  socket.on('client:getGameData', () => {
    let html = gameStartView();
    html.then(data => saveStartData(data.generatedWord, data.hiddenWord));
    html.then(data => socket.emit('server:gameView', data.html));
  })

  socket.on('client:getResponse', (letter) => {
    let data = getResponseAction(letter);
    if (data.win === 1 && data.playerLives > 0) {
      socket.emit('server:getWin', winGameView());
    } else if (data.win === 0 && data.playerLives === 0) {
      socket.emit('server:getLose', loseGameView(generatedWord));
    } else if (data.win === 0 && data.playerLives > 0) {
      socket.emit('server:getResponse', data);
    }
  })
})

/**------------------------------- */


var generatedWord = "";
var hiddenWord = "";
var playerLives = 0;

const saveStartData = (g, h) => {
  generatedWord = g;
  hiddenWord = h;
}

const gameStartView = () => {
  playerLives = 5
  return getWord().then((data) => {
    let hiddenWord = "_ ".repeat(data.word.length);
    return {
      html: gameView(hiddenWord, playerLives),
      generatedWord: data.word,
      hiddenWord: hiddenWord.replaceAll(" ", "")
    }
  });
}

const getResponseAction = (letter) => {
  let gWord = generatedWord;
  let hWord = hiddenWord;
  let cont = 0;

  gWord = gWord.split("");
  hWord = hWord.split("");

  for (let l in gWord) {
    if (letter === gWord[l]) {
      hWord[l] = gWord[l];
    } else {
      cont++
    }
  }
  for (let l in hWord) {
    hWord[l] += " "
  }

  hWord = hWord.toString().replaceAll(",", "")
  hiddenWord = hWord.replaceAll(" ", "")
  playerLives -= cont === generatedWord.length ? 1 : 0;

  if (hiddenWord === generatedWord) {
    return { playerLives: playerLives, win: 1 }
  } else {
    return { hiddenWord: hWord, playerLives: playerLives, win: 0 }
  }
}

/**----------------------------------------------------------- */
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
